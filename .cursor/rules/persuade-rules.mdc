---
description: "Tailored instructions for the Persuade Voice Call Simulatorâ€”covering project architecture, component design, and integration specifications for Next.js, GPT-4o AI interactions, and WebRTC voice technologies."
globs:
  - "src/app/**/*.{ts,tsx,js,jsx}"
  - "src/lib/**/*.{ts,tsx,js,jsx}"
  - "src/components/**/*.{ts,tsx,js,jsx}"
  - "src/styles/**/*.{css,scss}"
alwaysApply: true
---

# Persuade Voice Call Simulator Guidelines

## Project Architecture

- Persuade is an AI-powered training platform for sales and customer service professionals
- Implement with Next.js App Router, TypeScript, and server components where appropriate
- Follow mobile-first responsive design principles with Tailwind CSS
- Maintain clear separation between UI components, business logic, and data services

## Component Organization

- Place reusable UI components in `src/app/components/ui`
- Put feature-specific components in dedicated folders like `src/app/components/simulation`
- Dashboard components should visualize training metrics with interactive charts
- All UI should follow the established design system (indigo/purple gradient theme)

## AI Integration (GPT-4o)

- Implement API routes for AI interactions in `src/app/api/ai`
- Set up streaming responses for natural conversation flow
- Create proper AI persona configurations for different simulation scenarios
- Implement conversation history management for contextual awareness
- Add proper error handling and fallback responses for API failures

## WebRTC Implementation

- Use WebRTC for peer-to-peer audio communication
- Create a custom hook (`useWebRTC`) to encapsulate WebRTC connection logic
- Implement simple signaling using Supabase Realtime or a similar lightweight solution
- Provide clear UI indicators for connection status (connecting, connected, disconnected)
- Handle ICE candidate exchange and session negotiation transparently

## Audio Processing

- Process audio with Web Audio API for quality enhancement
- Implement voice activity detection to improve interaction quality
- Add audio recording for playback and review functionality
- Create proper audio visualization components for engagement
- Ensure cross-browser compatibility with appropriate fallbacks

## Database Integration

- Use Supabase for authentication, storage, and database needs
- Create typed database schemas with proper relations
- Implement optimistic UI updates for a responsive feel
- Set up proper database indexes for query performance
- Utilize Supabase RLS (Row Level Security) for data protection

## Styling Guidelines

- Follow the design system with consistent use of:
  - Color: gradients from indigo-500 to purple-600 for primary elements
  - Typography: Inter font with appropriate size hierarchy
  - Spacing: consistent padding and margin scales
  - Animation: subtle, purposeful animations with 300ms transitions
- Use Tailwind CSS utility classes with consistent organization
- Create custom utility classes in globals.css for repeated patterns

## State Management

- Use React hooks for component-level state
- Implement context providers for shared state (auth, theme, simulations)
- Consider SWR or React Query for server state management
- Create custom hooks for complex state logic
- Maintain consistent loading and error states across the application

## Performance Optimization

- Implement code splitting for optimal bundle sizes
- Use `next/image` for optimized image delivery
- Minimize JavaScript with selective hydration
- Optimize WebRTC connection parameters for different network conditions
- Add appropriate caching headers for static assets

## Accessibility

- Maintain WCAG 2.1 AA compliance throughout the application
- Implement proper keyboard navigation for all interactive elements
- Ensure sufficient color contrast for text elements
- Add appropriate ARIA attributes for custom components
- Test with screen readers for proper announcement

## Documentation

- Document all API endpoints with TypeScript interfaces
- Add JSDoc comments for complex functions
- Create README files for major feature directories
- Maintain up-to-date setup instructions
- Document state management patterns and data flow
